import pygame
import sys
import random
import math
import time

WIDTH, HEIGHT = 150, 150
SIZE = 5
CELL_SIZE = 30
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
graph = [[] for _ in range (SIZE*SIZE)]

class PrimsRandomized:
    def __init__(self):
        self.row_len = SIZE
        self.total_nodes = SIZE ** 2
        self.TOP = 0
        self.LEFT = 1
        self.BOTTOM = 2
        self.RIGHT = 3

    def prims_mst(self):
        mst = [
            [0, 0, 0, 0] for _ in range(self.total_nodes)
        ]
        to_visit = [node for node in range(self.total_nodes)]
        node = to_visit[0]
        visited = [node]
        to_visit.remove(node)

        while len(to_visit) > 0:
            edges_pool = self.edges_to_unvisited_nodes(visited)
            edge = random.choice(edges_pool)
            node, next_node = edge
            direction = self.get_neighbour_dir(node, next_node)
            mst[node][direction] = 1
            neighbour_dir = self.get_neighbour_dir(next_node, node)
            mst[next_node][neighbour_dir] = 1
            visited.append(next_node)
            to_visit.remove(next_node)

        return mst

    def edges_to_unvisited_nodes(self, visited):
        edges_pool = []

        for node in visited:
            row = node // self.row_len
            col = node % self.row_len
            if row > 0:
                top_node = node - self.row_len
                if top_node not in visited:
                    edges_pool.append((node, top_node))
            if col > 0:
                left_node = node - 1
                if left_node not in visited:
                    edges_pool.append((node, left_node))
            if row < self.row_len - 1:
                bottom_node = node + self.row_len
                if bottom_node not in visited:
                    edges_pool.append((node, bottom_node))
            if col < self.row_len - 1:
                right_node = node + 1
                if right_node not in visited:
                    edges_pool.append((node, right_node))
        return edges_pool

    def get_neighbour_dir(self, node, next_node):
        if node - self.row_len == next_node:
            return self.TOP
        if node - 1 == next_node:
            return self.LEFT
        if node + self.row_len == next_node:
            return self.BOTTOM
        if node + 1 == next_node:
            return self.RIGHT

class RectMaze:

    def __init__(self, screen):
        self.size = SIZE
        self.sideLen = CELL_SIZE
        self.screen = screen

    def create_maze(self):
        pr = PrimsRandomized()
        mst = pr.prims_mst()
        for row in range(self.size):
            for col in range(self.size):
                rowLen = row * self.sideLen
                colLen = col * self.sideLen
                node = row * self.size + col
                if mst[node][pr.TOP] == 0:
                    pygame.draw.line(self.screen, BLACK, (colLen, rowLen), (colLen + self.sideLen, rowLen ))
                else: graph[node].append(node-SIZE)
                if mst[node][pr.RIGHT] == 0:
                    pygame.draw.line(self.screen, BLACK, (colLen + self.sideLen, rowLen), (colLen + self.sideLen, rowLen + self.sideLen))
                else: graph[node].append(node+1)
                if mst[node][pr.BOTTOM] == 0:
                    pygame.draw.line(self.screen, BLACK, (colLen, rowLen + self.sideLen), (colLen + self.sideLen, rowLen + self.sideLen))
                else: graph[node].append(node+SIZE)
                if mst[node][pr.LEFT] == 0:
                    pygame.draw.line(self.screen, BLACK, (colLen, rowLen), (colLen, rowLen + self.sideLen))
                else: graph[node].append(node-1)
                

class DFS:
    def __init__(self, maze, screen, start, end):
        self.maze = maze
        self.screen = screen
        self.start = start
        self.end = end
    
    def run_dfs(self):
        dfs(self.start, self.end, self.screen)
    
l = []

def dfs(start, end, screen, visited=None):
    if ( start == end ): return
    if visited is None:
        visited = set()
    visited.add(start)
    for neighbor in graph[start]:
        if neighbor not in visited:
            pr = (start,neighbor)
            l.append(pr)
            dfs(neighbor, end, screen, visited)

    
        

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("DFS IN MAZE")
    clock = pygame.time.Clock()
    running = True

    screen.fill(WHITE)
    rm = RectMaze(screen)
    rm.create_maze()

    ck = 0
    grid_state = [[0 for _ in range(SIZE)] for _ in range(SIZE)]
    while running:

        dfs = DFS(grid_state,screen, 0, 15)
        dfs.run_dfs()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            #elif event.type == pygame.MOUSEBUTTONDOWN and checkEnough < 2:
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  

                    pos = pygame.mouse.get_pos()
                    clicked_row = pos[1] // CELL_SIZE
                    clicked_col = pos[0] // CELL_SIZE
                    if clicked_row < SIZE and clicked_col < SIZE:
                        grid_state[clicked_row][clicked_col] = 1
        if ( ck == 0 ):
            ck = 1
            cnt = 1
            for i in l:
                key, value = i
                draw_line(screen,key,value)
                time.sleep(1)
                pygame.display.flip()
                print(cnt)
                cnt+=1

        draw_cells(screen, grid_state)
        pygame.display.flip()
        clock.tick(30)

    pygame.quit()
    sys.exit()

def draw_cells(screen, grid_state):
    for row in range(SIZE):
        for col in range(SIZE):
            if grid_state[row][col] == 1:
                pygame.draw.circle(screen, (255, 0, 0), (col * CELL_SIZE + CELL_SIZE // 2, row * CELL_SIZE + CELL_SIZE // 2), 10)

def draw_line(screen, start, end):
    x_start = start // SIZE * CELL_SIZE + CELL_SIZE // 2 
    y_start = start % SIZE * CELL_SIZE + CELL_SIZE // 2 
    x_end = end // SIZE * CELL_SIZE + CELL_SIZE // 2 
    y_end = end % SIZE * CELL_SIZE + CELL_SIZE // 2 
    pygame.draw.line(screen, (128,128,0), (y_start, x_start), (y_end, x_end), 6)
    pygame.draw.circle(screen, (128,128,0), (y_start, x_start), 8)
    pygame.draw.circle(screen, (128,128,0), (y_end, x_end), 8)

if __name__ == "__main__":
    main()


